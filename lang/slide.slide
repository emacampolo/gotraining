Go workshop

* Types

* Type provides us two pieces of information: size and representation

    // float tells us it's an IEEE 754 binary decimal
    // 64 tells us that it's an eight byte value

    var f float64

    // we know it is an integer but size will depend on the architecture 64 bits (8 bytes) or 32 bits (4 bytes)

    var i int

    // we explicitly declare its size. We should have a very good reason to do so.

    var j int64

* Variable declaration and implicit initialization

.play -edit language/variable.go /START OMIT/,/END OMIT/

* Variable declaration and explicit initialization

    bb := "hello"
    cc := 3.14159
    dd := true
    zz := 1

* var is a readability marker

    x := 0
    var x int // preferable

    s := ""
    var s string // preferable

    // avoid this constructions
    var i int = 10
    var i = 10

_just_be_consistent_

* Struct types

* Struct types

    // example represents a type with different fields.
    type example struct {
    	flag    bool
    	counter int16
    	pi      float32
    }

    func main() {
        // Declare a variable of type example set to its zero value.
        var e1 example

        // Declare a variable of type example and init using
        // a struct literal.
        e2 := example {
            flag:    true,
            counter: 10,
            pi:      3.141592,
        }

        // We may see empty literal constructions when initializing to its zero value but
        // we prefer var.
        // The only time when you see this idiom is when returning from a function.
        e2 := example{}
    }

* Struct types

    func main() {
        // Declare a variable of an *anonymous* type set to its zero value.
        var e1 struct {
            flag    bool
            counter int16
            pi      float32
        }

        // Declare a variable of an anonymous type and init
        // using a struct literal. Common usage in test tables.
        e2 := struct {
            flag    bool
            counter int16
            pi      float32
        }{
            flag:    true,
            counter: 10,
            pi:      3.141592,
        }
    }

* Struct types

.play -edit language/inner_struct.go /START OMIT/,/END OMIT/

* Value semantics

- Everything in GO is pass by *value*
- There's two types of data that we operate with. It is the *value* *itself*, like the integer value 10, or it's the *value's* *address*
- Value semantics are a really important part of your ability to keep the heap clean
- *Pros*: isolation, immutability, no side effect.
- *Cons*: multiple copies

* Value semantics

.play -edit language/value/semantic.go /START OMIT/,/END OMIT/

* Pointer semantics

- Everything in GO is pass by *value* (addresses too!)
- Pointers are for sharing
- We no longer acts in a sandbox
- Fixes the perf issue of value semantics at cost of allocation == GC
- Always ask yourself which semantics are in play!

* Pointer semantics

.play -edit language/pointer/semantic.go /START OMIT/,/END OMIT/

* Value semantics

.play -edit language/value/factory.go

* Pointer semantics

.play -edit language/pointer/factory.go

* Semantics guidelines

Types:

- For Built-in types (1) & Reference types (2) we should always use *value* *semantics*
- For User defined types we get to decide but we should default to *value* *semantics* if in doubt

(1) numerics, strings, bool
(2) slices, maps, channels, interfaces values and functions

_Exception_: You may take the address of a slice or a map only if you're sharing it down the call-stack and to a function that's either named decode or un-marshall.

* Arrays

    //  -----------------------------
    // | nil | nil | nil | nil | nil |
    //  -----------------------------
    // |  0  |  0  |  0  |  0  |  0  |
    //  -----------------------------
    var strings [5]string

* Arrays

- Its length is part of its type ([4]int and [5]int are distinct, incompatible types)
    var five [5]int
    var four [4]int
    five = four // does not compile
- They do not need to be initialized explicitly; the zero value is a ready-to-use array whose elements are themselves zeroed
- One way to think about arrays is as a sort of struct but with indexed rather than named fields

* Slices

    package runtime

    type SliceHeader struct {
            ptr   unsafe.Pointer
            len   int
            cap   int
    }

.image slice_header.png 380 _

: The pointer points to the first element of the underlying array that is *reachable* through the slice
: The length is the number of slice elements
: The capacity is the number of elements in the underlying array (beginning at the element referred to by the slice pointer)

* Slices

.play -edit language/slices/make/make.go /START OMIT/,/END OMIT/

* Slicing

.play -edit language/slices/slicing/slicing.go /START OMIT/,/END OMIT/

* Slicing a slice

.image slice5.png 560 800

* Slices

- The zero value of a slice is _nil_. A nil slice has no underlying array.

    var s []int // len(s) == 0, s == nil
    s = []int{} // len(s) == 0, s != nil

- If you need to test whether a slice is empty, use len(s) == 0, not s == nil.

- The zero value is usable immediately without make()
    var nums []int // DON'T use nums := []int{} OR nums := make([]int)
    if shouldAdd {
        nums = append(nums, 1)
    }

- If we know in advance how many elements we are going to append, set the initial capacity to that number
    s := make([]int, 0, len(e))

* Append

.play -edit language/slices/append/append.go /START OMIT/,/END OMIT/

* For-range mechanics

    // Value semantic of the for range
    for i, _ := range c
    for _, value := range c

    // Pointer semantic of the for range
    for i := range c

    // More info: https://garbagecollected.org/2017/02/22/go-range-loop-internals/

* Arrays - Value semantics

.play -edit language/value/array_range.go

* Arrays - Pointer semantics

.play -edit language/pointer/array_range.go

* Slices - Value semantics

.play -edit language/value/slice_range.go

* Slices - Pointer semantics

.play -edit language/pointer/slice_range.go

* Methods & Functions

* Methods & Functions

.play -edit language/methods/example1/example.go /START OMIT/,/END OMIT/

* Methods & Functions

.play -edit language/methods/example2/example.go /START OMIT/,/END OMIT/

* Mixing semantics - The Horror

.play -edit language/methods/example3/example3.go /START OMIT/,/END OMIT/

* Methods & Functions

.code time.go

* Interfaces

* An interface type specifies a set of methods that a concrete type must possess

* Interfaces are satisfied implicitly ⇒ convention over configuration

* Interfaces in Java

    interface Speaker {
        String speak();
    }

    class Person implements Speaker {
        @Override
        public String speak() {
            return "hi";
        }
    }

* Interfaces in GO

    type Speaker interface {
        Speak() string
    }

    type Person struct {}

    func (p Person) Speak() string {
        return "hi"
    }

* Interface semantics

.play -edit language/interfaces/example1/example1.go /START OMIT/,/END OMIT/

* Interface semantics

.image interface_value.png 600 _

* A type satisfies an interface if it possesses all the methods the interface requires

* 

.play -edit language/interfaces/example2/example2.go /START OMIT/,/END OMIT/

* Method sets

- The method set of any other type T consists of all methods declared with receiver type T
- The method set of the corresponding pointer type *T is the set of all methods declared with receiver *T or T

https://golang.org/ref/spec#Method_sets

* Errors

    type error interface {
        Error() string
    }

* Errors

    type errorString struct {
        s string
    }

    func (e *errorString) Error() string {
        return e.s
    }

    func New(text string) error {
        return &errorString{text}
    }

* Errors

    fmt.Println(errors.New("EOF") == errors.New("EOF")) // "false"

*

.play -edit errors/errors.go /START OMIT/,/END OMIT/

* Concurrency

* Concurrency vs Parallelism

*Concurrency* is a property of the code, *parallelism* is a property of the running program

We do not write *parallel* code, only *concurrent* code that we _hope_ will be run in parallel

* "Share memory by communicating, don't communicate by sharing memory."

* Race condition

A race condition occurs when two or more operations must execute in the correct order, but the program has not been written so that this order is guaranteed to be maintained.

.code concurrency/race1.go /START OMIT/,/END OMIT/

- Nothing is printed
- "the value is 0" is printed
- "the value is 1" is printed

* Correctness vs performance

We should first strive to optimize for correctness.
The lack of performance of your software is gonna come from four places

- Latency ⇒ networking and IO
- Data access ⇒ how you access data, how efficiently you access data.
- Memory allocations and therefore garbage collection
- Algorithm efficiencies ⇒ number of steps

: The hardware is so fast that we should focus on the first 3 problems instead of micro optimizing an algorithm.
: Correctness first.

* New Relic

.image only-go.png _ 1000

* "Once we start talking about milliseconds of latency, no optimization matters"  B.Kennedy

*

.image full.png _ 1000
